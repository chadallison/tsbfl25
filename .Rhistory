mutate(name = factor(name, levels = rev(name_order))) |>
pivot_longer(!name, names_to = "which", values_to = "pts") |>
mutate(which = ifelse(which == "opt_score", "Optimal", "Actual")) |>
ggplot(aes(name, pts)) +
geom_col(aes(fill = which), position = "dodge") +
geom_text(aes(label = pts), size = 3, hjust = -0.15, alpha = 0.5,
position = position_dodge2(width = 0.9)) +
coord_flip(ylim = c(0, max(vis_data$opt_score) * 1.05)) +
labs(x = NULL, y = "Points Scored", fill = NULL,
title = "Who sucked at setting their lineup this past week?",
subtitle = "Top (best) to bottom (worst)") +
scale_fill_manual(values = c("indianred3", "springgreen4")) +
scale_y_continuous(breaks = seq(0, 250, by = 10))
vis_data = true_optimal_pts_weekly |>
inner_join(team_name_to_name, by = "franchise_name") |>
group_by(franchise_name) |>
summarise(true_score = sum(true_score),
opt_score = sum(opt_score),
missed = sum(missed)) |>
inner_join(team_name_to_name, by = "franchise_name") |>
arrange(missed) |>
transmute(name = paste0(first, " (", missed, ")"),
true_score, opt_score)
name_order = vis_data$name
vis_data |>
mutate(name = factor(name, levels = rev(name_order))) |>
pivot_longer(!name, names_to = "which", values_to = "pts") |>
mutate(which = ifelse(which == "opt_score", "Optimal", "Actual")) |>
ggplot(aes(name, pts)) +
geom_col(aes(fill = which), position = "dodge") +
geom_text(aes(label = pts), size = 3, hjust = -0.15, alpha = 0.5,
position = position_dodge2(width = 0.9)) +
coord_flip(ylim = c(0, max(vis_data$opt_score) * 1.05)) +
labs(x = NULL, y = "Points Scored", fill = NULL,
title = "Who has been the best at setting their lineup this season?",
subtitle = "Top (best) to bottom (worst)") +
scale_fill_manual(values = c("indianred3", "springgreen4"))
x = end_games |>
slice_max(lose_score, n = 5, with_ties = F) |>
inner_join(team_name_to_name, by = c("win_team" = "franchise_name")) |>
rename(win_name = first) |>
inner_join(team_name_to_name, by = c("lose_team" = "franchise_name")) |>
rename(lose_name = first) |>
mutate(score = paste0(win_score, "-", lose_score)) |>
mutate(x = as.character(glue("Week {week}: {win_name} def. {lose_name} {score}"))) |>
pull(x)
x = end_games |>
slice_min(win_score, n = 5, with_ties = F) |>
inner_join(team_name_to_name, by = c("win_team" = "franchise_name")) |>
rename(win_name = first) |>
inner_join(team_name_to_name, by = c("lose_team" = "franchise_name")) |>
rename(lose_name = first) |>
mutate(score = paste0(win_score, "-", lose_score)) |>
mutate(x = as.character(glue("Week {week}: {win_name} def. {lose_name} {score}"))) |>
pull(x)
end_games |>
select(week, team = win_team, score = win_score) |>
rbind(end_games |>
select(week, team = lose_team, score = lose_score)) |>
group_by(team) |>
mutate(pct = score / sum(score)) |>
ungroup() |>
inner_join(team_records |>
distinct(team, pts_scored), by = "team") |>
inner_join(team_name_to_name, by = c("team" = "franchise_name")) |>
mutate(first = paste0(first, "\n(", pts_scored, ")")) |>
ggplot(aes(week, pct)) +
geom_line(aes(col = pts_scored), linewidth = 1.5, show.legend = F) +
scale_color_gradient(low = "indianred3", high = "springgreen4") +
facet_wrap(vars(first)) +
theme(axis.text = element_blank()) +
labs(x = "Week", y = "Percent of Total Points Scored",
title = "Weekly Scoring Trends",
subtitle = "Line color indicates total points scored")
end_with_margins = end_games |>
mutate(margin = win_score - lose_score)
get_team_avg_margin = function(tm) {
x = end_with_margins |> filter(win_team == tm | lose_team == tm) |> pull(margin)
return(round(mean(x), 2))
}
team_avg_margins = data.frame(team = all_teams) |>
mutate(avg_margin = sapply(team, get_team_avg_margin)) |>
inner_join(team_name_to_name, by = c("team" = "franchise_name"))
team_avg_margins |>
ggplot(aes(reorder(first, -avg_margin), avg_margin)) +
geom_col(aes(fill = avg_margin), show.legend = F) +
coord_flip(ylim = c(0, max(team_avg_margins$avg_margin) * 1.05)) +
scale_fill_gradient(low = "indianred3", high = "springgreen4") +
geom_text(aes(label = avg_margin), size = 3, hjust = -0.25) +
labs(x = NULL, y = "Average game margin",
title = "Who is playing the closest games, on average?",
subtitle = "Without regard to winning or losing") +
scale_y_continuous(breaks = seq(0, 50, by = 5))
x = end_games |>
mutate(total = win_score + lose_score,
final = paste0(win_score, "-", lose_score)) |>
slice_max(total, n = 5, with_ties = F) |>
inner_join(team_name_to_name, by = c("win_team" = "franchise_name")) |>
rename(win_first = first) |>
inner_join(team_name_to_name, by = c("lose_team" = "franchise_name")) |>
rename(lose_first = first) |>
mutate(x = as.character(glue("Week {week}: {win_first} def. {lose_first} {final}"))) |>
pull(x)
x = end_games |>
mutate(score = paste0(win_score, "-", lose_score),
diff = win_score - lose_score) |>
slice_max(diff, n = 5, with_ties = F) |>
inner_join(team_name_to_name, by = c("win_team" = "franchise_name")) |>
rename(win_name = first) |>
inner_join(team_name_to_name, by = c("lose_team" = "franchise_name")) |>
rename(lose_name = first) |>
mutate(x = as.character(glue("Week {week}: {win_name} def. {lose_name} {score}"))) |>
pull(x)
x = end_games |>
mutate(score = paste0(win_score, "-", lose_score),
diff = win_score - lose_score) |>
slice_min(diff, n = 5, with_ties = F) |>
inner_join(team_name_to_name, by = c("win_team" = "franchise_name")) |>
rename(win_name = first) |>
inner_join(team_name_to_name, by = c("lose_team" = "franchise_name")) |>
rename(lose_name = first) |>
mutate(x = as.character(glue("Week {week}: {win_name} def. {lose_name} {score}"))) |>
pull(x)
x = end_games |>
select(week, team = win_team, score = win_score) |>
rbind(end_games |>
select(week, team = lose_team, score = lose_score)) |>
slice_max(score, n = 5, with_ties = F) |>
inner_join(team_name_to_name, by = c("team" = "franchise_name")) |>
mutate(x = as.character(glue("{score} ({first}, Week {week})"))) |>
pull(x)
x = end_games |>
select(week, team = win_team, score = win_score) |>
rbind(end_games |>
select(week, team = lose_team, score = lose_score)) |>
slice_min(score, n = 5, with_ties = F) |>
inner_join(team_name_to_name, by = c("team" = "franchise_name")) |>
mutate(x = as.character(glue("{score} ({first}, Week {week})"))) |>
pull(x)
x = ff_starters(conn, week = max(end_games$week)) |>
filter(!lineup_slot %in% c("BE", "IR")) |>
mutate(pct = round(player_score / franchise_score * 100, 1)) |>
slice_max(pct, n = 5, with_ties = F) |>
inner_join(team_name_to_name, by = "franchise_name") |>
mutate(x = as.character(glue("{player_name}: {pct}% of total points for {first}"))) |>
pull(x)
x = ff_starters(conn, week = 1:max(end_games$week)) |>
filter(!lineup_slot %in% c("BE", "IR")) |>
group_by(franchise_name, player_name) |>
summarise(pts = sum(player_score),
.groups = "drop") |>
inner_join(team_records |>
select(team, first, pts_scored), by = c("franchise_name" = "team")) |>
mutate(pct = round(pts / pts_scored * 100, 2)) |>
slice_max(pct, n = 10, with_ties = F) |>
mutate(x = as.character(glue("{player_name}: {pct}% of total points for {first}"))) |>
pull(x)
true_proj_scores_weekly = ff_starters(conn, week = 1:max(end_games$week)) |>
filter(!lineup_slot %in% c("BE", "IR")) |>
group_by(week, franchise_name) |>
summarise(true_score = mean(franchise_score),
proj_score = round(sum(projected_score), 2),
.groups = "drop")
end_with_proj = end_games |>
inner_join(true_proj_scores_weekly, by = c("win_team" = "franchise_name", "week")) |>
rename(win_proj_score = proj_score) |>
inner_join(true_proj_scores_weekly, by = c("lose_team" = "franchise_name", "week")) |>
rename(lose_proj_score = proj_score) |>
select(!contains("true")) |>
mutate(win_score_over_proj = win_score - win_proj_score,
lose_score_over_proj = lose_score - lose_proj_score)
past_week_luck_data = end_with_proj |>
filter(week == max(end_games$week)) |>
transmute(team = win_team, luck = lose_score_over_proj * -1) |>
rbind(end_with_proj |>
filter(week == max(end_games$week)) |>
transmute(team = lose_team, luck = win_score_over_proj * -1)) |>
inner_join(team_name_to_name, by = c("team" = "franchise_name")) |>
mutate(poslab = ifelse(luck >= 0, round(luck, 1), ""),
neglab = ifelse(luck < 0, round(luck, 1), ""))
past_week_luck_data |>
ggplot(aes(reorder(first, luck), luck)) +
geom_col(aes(fill = luck), show.legend = F) +
coord_flip(ylim = c(min(past_week_luck_data$luck) * 1.05,
max(past_week_luck_data$luck) * 1.05)) +
scale_fill_gradient(low = "indianred3", high = "springgreen4") +
geom_text(aes(label = poslab), size = 3, hjust = -0.25) +
geom_text(aes(label = neglab), size = 3, hjust = 1.25) +
labs(x = NULL, y = "Luck",
title = "Who were the luckiest and unluckiest teams this past week?",
subtitle = "Opponent-based luck only") +
theme(axis.text.x = element_blank())
full_szn_luck = end_with_proj |>
transmute(team = win_team, luck = lose_score_over_proj * -1) |>
rbind(end_with_proj |>
transmute(team = lose_team, luck = win_score_over_proj * -1)) |>
inner_join(team_name_to_name, by = c("team" = "franchise_name")) |>
group_by(team, first) |>
summarise(luck = sum(luck),
.groups = "drop") |>
mutate(poslab = ifelse(luck >= 0, round(luck, 1), ""),
neglab = ifelse(luck < 0, round(luck, 1), ""))
full_szn_luck |>
ggplot(aes(reorder(first, luck), luck)) +
geom_col(aes(fill = luck), show.legend = F) +
coord_flip(ylim = c(min(full_szn_luck$luck) * 1.05,
max(full_szn_luck$luck) * 1.05)) +
scale_fill_gradient(low = "indianred3", high = "springgreen4") +
geom_text(aes(label = poslab), size = 3, hjust = -0.25) +
geom_text(aes(label = neglab), size = 3, hjust = 1.25) +
labs(x = NULL, y = "Luck",
title = "Who are the luckiest and unluckiest teams season-long?",
subtitle = "Opponent-based luck only") +
theme(axis.text.x = element_blank())
get_team_score_over_proj = function(tm) {
w = end_with_proj |> filter(win_team == tm) |> pull(win_score_over_proj)
l = end_with_proj |> filter(lose_team == tm) |> pull(lose_score_over_proj)
return(sum(c(w, l)))
}
get_team_opp_score_over_proj = function(tm) {
w = end_with_proj |> filter(win_team == tm) |> pull(lose_score_over_proj)
l = end_with_proj |> filter(lose_team == tm) |> pull(win_score_over_proj)
return(sum(c(w, l ) * -1))
}
data.frame(team = all_teams) |>
mutate(sop = sapply(team, get_team_score_over_proj),
luck = sapply(team, get_team_opp_score_over_proj),
total = sop + luck) |>
inner_join(team_name_to_name, by = c("team" = "franchise_name")) |>
ggplot(aes(sop, luck)) +
geom_point(aes(col = total), shape = "square", size = 4, show.legend = F) +
ggrepel::geom_text_repel(aes(label = first), size = 3.5, max.overlaps = 10) +
scale_color_gradient(low = "indianred3", high = "springgreen4") +
geom_vline(xintercept = 0, linetype = "dashed", alpha = 0.5) +
geom_hline(yintercept = 0, linetype = "dashed", alpha = 0.5) +
labs(x = "Scoring Over Expected",
y = "Opponent Scoring Under Expected",
title = "Who is a ball knower and who is a luck merchant?",
subtitle = "Unless people request it, this is replacing the 'full luck' stuff") +
scale_x_continuous(breaks = seq(-250, 250, by = 20)) +
scale_y_continuous(breaks = seq(-250, 250, by = 20))
pos_data = select(end_games, week, team = win_team, score = win_score) |>
rbind(select(end_games, week, team = lose_team, score = lose_score)) |>
group_by(week) |>
mutate(pos = rank(-score)) |>
ungroup() |>
group_by(team) |>
summarise(avg_pos = round(mean(pos), 2)) |>
inner_join(team_name_to_name, by = c("team" = "franchise_name"))
pos_data |>
ggplot(aes(reorder(first, -avg_pos), avg_pos)) +
geom_col(aes(fill = avg_pos), show.legend = F) +
scale_fill_gradient(high = "indianred3", low = "springgreen4") +
coord_flip(ylim = c(0, max(pos_data$avg_pos) * 1.05)) +
geom_text(aes(label = avg_pos), size = 3, hjust = -0.25) +
labs(x = NULL, y = "Average weekly finishing position",
title = "Average weekly finishing position by team") +
scale_y_continuous(breaks = seq(0, 10, by = 1))
names = c("Josh", "Drew", "Hank", "David", "Josh")
weeks = c(1, 1, 4, 6, 7)
times = c(29, 13, 10, 9, 27)
data.frame(name = names, week = weeks, time = times) |>
mutate(lab = paste0(name, " (Week ", week, ")"),
timelab = paste0(time, "s")) |>
ggplot(aes(reorder(lab, -time), time)) +
geom_col(fill = "saddlebrown") +
coord_flip(ylim = c(0, max(times) * 1.05)) +
geom_text(aes(label = timelab), size = 3, hjust = -0.25) +
labs(x = NULL, y = NULL,
title = "straight chugging it, and by it, let's justr say, well, my bervage") +
theme(axis.text.x = element_blank())
get_opp_proj_scores = function(tm) {
w = end_with_proj |> filter(win_team == tm) |> pull(lose_proj_score)
l = end_with_proj |> filter(lose_team == tm) |> pull(win_proj_score)
return(round(mean(c(w, l)), 2))
}
sos_pct_data = data.frame(team = all_teams) |>
mutate(sos = sapply(team, get_opp_proj_scores)) |>
inner_join(team_records, by = "team") |>
mutate(win_pct = win_pct / 100)
sos_pct_data |>
ggplot(aes(sos, win_pct)) +
geom_point(aes(col = win_pct), size = 4, shape = "square", show.legend = F) +
ggrepel::geom_text_repel(aes(label = first), size = 3.5, max.overlaps = 10) +
geom_line(stat = "smooth", formula = y ~ x, method = "lm", linetype = "dashed") +
scale_color_gradient(low = "indianred3", high = "springgreen4") +
geom_vline(xintercept = mean(sos_pct_data$sos), linetype = "dotted", alpha = 0.5) +
geom_hline(yintercept = 0.5, linetype = "dotted", alpha = 0.5) +
labs(x = "Strength of Schedule Rating",
y = "Win Percentage",
title = "Win Percentage by Strength of Schedule") +
scale_x_continuous(breaks = seq(100, 130, by = 1)) +
scale_y_continuous(breaks = seq(0, 1, by = 0.1), labels = scales::percent)
league_week_opt = espn_potentialpoints(conn, weeks = 1:max(end_games$week)) |>
filter(!is.na(optimal_slot)) |>
group_by(week) |>
summarise(score = sum(player_score)) |>
inner_join(espn_potentialpoints(conn, weeks = 1:max(end_games$week)) |>
distinct(week, franchise_name, franchise_score) |>
group_by(week) |>
summarise(true = sum(franchise_score)), by = "week") |>
mutate(diff = score - true)
league_week_opt_long = league_week_opt |>
pivot_longer(cols = c(score, true), names_to = "which", values_to = "pts") |>
mutate(which = ifelse(which == "score", "Optimal", "Actual"))
midpoints = league_week_opt_long |>
pivot_wider(names_from = "which", values_from = "pts") |>
mutate(y_mid = (Optimal + Actual) / 2) |>
select(week, y_mid, diff)
league_week_opt_long |>
mutate(which = factor(which, levels = c("Optimal", "Actual"))) |>
ggplot(aes(week, pts)) +
geom_line(aes(col = which), linewidth = 2) +
geom_text(data = midpoints, aes(x = week, y = y_mid, label = diff), size = 3.5) +
scale_color_manual(values = c("indianred3", "springgreen4")) +
labs(x = "Week", y = "Points", col = NULL,
title = "League-Wide Optimal vs. True Scoring",
subtitle = "Number between lines represents total points missed") +
scale_x_continuous(breaks = seq(1, 16, by = 1)) +
scale_y_continuous(breaks = seq(750, 1500, by = 50)) +
theme(legend.position = "right")
ms_ref = select(end_games, week, team = win_team, score = win_score) |>
rbind(select(end_games, week, team = lose_team, score = lose_score)) |>
group_by(week) |>
mutate(rk = rank(-score)) |>
ungroup() |>
filter(rk <= 3) |>
group_by(team) |>
summarise(ms = mean(score))
select(end_games, week, team = win_team, score = win_score) |>
rbind(select(end_games, week, team = lose_team, score = lose_score)) |>
group_by(week) |>
mutate(rk = rank(-score)) |>
ungroup() |>
filter(rk <= 3) |>
count(team) |>
arrange(desc(n)) |>
inner_join(team_name_to_name, by = c("team" = "franchise_name")) |>
inner_join(ms_ref, by = "team") |>
arrange(desc(n), desc(ms)) |>
mutate(rn = row_number()) |>
ggplot(aes(reorder(first, -rn), n)) +
geom_col(fill = "springgreen4") +
geom_text(aes(label = n), size = 3, hjust = -0.75) +
coord_flip() +
labs(x = NULL, y = "Count",
title = "Most times finishing with a top three score",
subtitle = "Ties ordered by average score in those games") +
theme(axis.text.x = element_blank())
end_games |>
group_by(win_team) |>
summarise(ws = mean(win_score),
ls = mean(lose_score)) |>
inner_join(team_name_to_name, by = c("win_team" = "franchise_name")) |>
ggplot(aes(ws, ls)) +
geom_point(aes(col = ws), size = 4, shape = "square", show.legend = F) +
ggrepel::geom_text_repel(aes(label = first), size = 3, max.overlaps = 10) +
geom_line(stat = "smooth", method = "lm", formula = y ~ x, linetype = "dashed") +
labs(x = "Average Score in Wins", y = "Average Opponent Score in Wins",
title = "Who needs their opponent to stink in order to win?",
subtitle = "I fear I'm not beating the allegations") +
scale_x_continuous(breaks = seq(50, 200, by = 5)) +
scale_y_continuous(breaks = seq(50, 200, by = 5)) +
scale_color_gradient(low = "indianred3", high = "springgreen4")
read.delim("input.txt")
read.delim("input.txt") |>
setNames(c("num"))
df = read.delim("input.txt") |>
setNames(c("num"))
df
df |>
mutate(lag = lag(num, n = 1))
df |>
mutate(lag = lag(num, n = 1),
flg = ifelse(num > lag, 1, 0))
df |>
mutate(lag = lag(num, n = 1),
flg = ifelse(num > lag, 1, 0)) |>
summarise(sol = sum(flg, na.rm = T))
knitr::knit_hooks$set(source = function(x, options) {
hook.r = function(x, options) {
fence = "```"
language = tolower(options$engine)
if (language == "node") language = "javascript"
if (!options$highlight) language = "text"
if (!is.null(options$fold_code)) {
paste0("\n\n", "<details><summary>View Code</summary>\n", fence, language,
"\n", x, fence, "\n\n", "</details>\n")
} else paste0('\n\n', fence, language, '\n', x, fence,  '\n\n')
}
x = knitr:::hilight_source(x, "markdown", options)
hook.r(paste(c(x, ""), collapse = "\n"), options)
})
library(tidyverse)
library(randomForest)
library(tvthemes)
library(janitor)
library(cbbdata)
library(rvest)
theme_custom = theme_avatar() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, size = 9, vjust = 2.5, face = "italic"),
plot.caption = element_text(face = "italic"),
panel.grid.major = element_line(linewidth = 0.5, colour = "#DFDAD1"),
panel.grid.minor = element_line(linewidth = 0.5, colour = "#DFDAD1"))
theme_set(theme_custom)
my_user = Sys.getenv("USER")
my_pw = Sys.getenv("PW")
cbd_login(username = my_user, password = my_pw)
get_kenpom = function() {
url = "https://kenpom.com/"
webpage = read_html(url)
tbl = (webpage |> html_nodes(css = "#data-area") |> html_table())[[1]]
my_cols = c("rk", "team", "conf", "w_l", "adj_em",
"adj_o", "adj_o_rk", "adj_d", "adj_d_rk",
"adj_t", "adj_t_rk",
"luck", "luck_rk",
"sos_adj_em", "sos_adj_em_rk", "sos_opp_o", "sos_opp_o_rk", "sos_opp_d", "sos_opp_d_rk",
"ncsos_adj_em", "ncsos_adj_em_rk")
df = tbl |>
setNames(my_cols) |>
filter(rk != "Rk" & rk != "") |>
mutate(rk = as.integer(rk), adj_em = as.numeric(adj_em), adj_o = as.numeric(adj_o),
adj_o_rk = as.integer(adj_o_rk), adj_d = as.numeric(adj_d), adj_d_rk = as.integer(adj_d_rk),
adj_t = as.numeric(adj_t), adj_t_rk = as.integer(adj_t_rk), luck = as.numeric(luck),
luck_rk = as.integer(luck_rk), sos_adj_em = as.numeric(sos_adj_em),
sos_adj_em_rk = as.integer(sos_adj_em_rk), sos_opp_o = as.numeric(sos_opp_o),
sos_opp_o_rk = as.integer(sos_opp_o_rk), sos_opp_d = as.numeric(sos_opp_d),
sos_opp_d_rk = as.integer(sos_opp_d_rk), ncsos_adj_em = as.numeric(ncsos_adj_em),
ncsos_adj_em_rk = as.integer(ncsos_adj_em_rk))
return(df)
}
kp_raw = get_kenpom() |>
mutate(team = trimws(str_remove_all(team, "\\d+")))
games_raw = cbd_torvik_game_box(year = 2025)
print("Data acquisition complete")
kp_teams = sort(unique(kp_raw$team))
torvik_teams = games_raw |>
count(team) |>
filter(n >= 20) |>
pull(team)
kp = kp_raw |>
mutate(team = case_when(team == "N.C. State" ~ "North Carolina St.",
team == "Charleston" ~ "College of Charleston",
team == "Louisiana" ~ "Louisiana Lafayette",
team == "Purdue Fort Wayne" ~ "Fort Wayne",
team == "LIU" ~ "LIU Brooklyn",
team == "Saint Francis" ~ "St. Francis PA",
team == "Detroit Mercy" ~ "Detroit",
T ~ team))
if (length(intersect(kp$team, torvik_teams)) == length(torvik_teams)) {
print("Team names matched successfully")
} else {
print("Team names not matched")
}
valid_game_ids = games_raw |>
filter(team %in% torvik_teams) |>
count(game_id) |>
filter(n == 2) |>
pull(game_id)
get_home_team = function(gid) {
teams = games_raw |>
filter(game_id == gid) |>
pull(team)
loc1 = str_locate(gid, teams[1])[1]
loc2 = str_locate(gid, teams[2])[1]
if (loc1 < loc2) {
return(teams[2])
} else {
return(teams[1])
}
}
get_away_team = function(gid) {
teams = games_raw |>
filter(game_id == gid) |>
pull(team)
loc1 = str_locate(gid, teams[1])[1]
loc2 = str_locate(gid, teams[2])[1]
if (loc1 < loc2) {
return(teams[1])
} else {
return(teams[2])
}
}
home_away_teams = data.frame(game_id = valid_game_ids) |>
mutate(home_team = sapply(game_id, get_home_team),
away_team = sapply(game_id, get_away_team))
team_game_pts_scored = games_raw |>
distinct(game_id, team, pts)
game_results = home_away_teams |>
inner_join(games_raw |>
distinct(game_id, date), by = "game_id") |>
select(game_id, date, home_team, away_team) |>
inner_join(team_game_pts_scored, by = c("game_id", "home_team" = "team")) |>
rename(home_score = pts) |>
inner_join(team_game_pts_scored, by = c("game_id", "away_team" = "team")) |>
rename(away_score = pts) |>
mutate(win_team = ifelse(home_score > away_score, home_team, away_team),
lose_team = ifelse(home_score > away_score, away_team, home_team),
win_score = ifelse(home_score > away_score, home_score, away_score),
lose_score = ifelse(home_score > away_score, away_score, home_score))
games_raw |>
distinct(game_id, date)
home_away_teams
data.frame(game_id = valid_game_ids)
games_raw
valid_game_ids = games_raw |>
filter(team %in% torvik_teams) |>
count(game_id) |>
filter(n == 2) |>
pull(game_id)
games_raw
