margin = data |>
mutate(team_score = ifelse(home_team == team, home_score, away_score),
opp_score = ifelse(home_team == team, away_score, home_score),
margin = team_score - opp_score) |>
summarise(x = sum(margin)) |>
pull(x)
return(margin)
}
crossing(team = all_teams, seven_group = 1:upper_lim) |>
rowwise() |>
mutate(margin = get_seven_window_margin(team, seven_group)) |>
ungroup() |>
filter(!is.na(margin)) |>
inner_join(teams_info, by = "team") |>
ggplot(aes(seven_group, 1)) +
geom_col(aes(fill = margin), show.legend = F) +
facet_wrap(vars(abb), scale = "free") +
theme(axis.text = element_blank()) +
scale_fill_gradient(low = "indianred3", high = "springgreen4") +
labs(x = NULL, y = NULL,
title = "Team Margins in Seven-Game Windows")
get_series_data = function(team, series) {
x = end_games |>
filter(home_team == team | away_team == team) |>
arrange(date) |>
mutate(my_team = ifelse(home_team == team, home_team, away_team),
opp_team = ifelse(home_team == team, away_team, home_team))
x$series_num = NA
x$series_num[1] = 1
for (i in 2:nrow(x)) {
if (x$opp_team[i] == x$opp_team[i - 1]) {
x$series_num[i] = x$series_num[i - 1]
} else {
x$series_num[i] = x$series_num[i - 1] + 1
}
}
data = x |> filter(series_num == series)
if (nrow(data) == 0) return(NA)
wins = data |> filter(win_team == team) |> nrow()
losses = data |> filter(lose_team == team) |> nrow()
if (wins > losses) {
return("Series Win")
} else if (wins < losses) {
return("Series Loss")
} else {
return("Series Tied or In Progress")
}
return(x)
}
upper_lim = ceiling(team_records |>
transmute(gp = wins + losses) |>
slice_max(gp, n = 1, with_ties = F) |>
pull(gp) / 2)
team_series_results = crossing(team = all_teams, series = 1:upper_lim) |>
rowwise() |>
mutate(wl = get_series_data(team, series)) |>
ungroup() |>
filter(!is.na(wl))
team_series_results |>
inner_join(teams_info, by = "team") |>
ggplot(aes(series, 1)) +
geom_col(aes(fill = wl), width = 0.75, position = "dodge") +
facet_wrap(vars(abb), scales = "free") +
scale_fill_manual(values = c("indianred3", "black", "springgreen4")) +
theme(axis.text = element_blank()) +
labs(x = NULL, y = NULL,
title = "Team Series Results")
end_pct = end_games |>
inner_join(team_records |>
distinct(team, pct), by = c("home_team" = "team")) |>
rename(home_pct = pct) |>
inner_join(team_records |>
distinct(team, pct), by = c("away_team" = "team")) |>
rename(away_pct = pct)
get_win_pct_above_500 = function(team) {
data = end_pct |>
filter(home_team == team | away_team == team) |>
mutate(opp_pct = ifelse(home_team == team, away_pct, home_pct)) |>
filter(opp_pct >= 50)
games = nrow(data)
wins = data |> filter(win_team == team) |> nrow()
return(round(wins / games * 100, 1))
}
get_win_pct_below_500 = function(team) {
data = end_pct |>
filter(home_team == team | away_team == team) |>
mutate(opp_pct = ifelse(home_team == team, away_pct, home_pct)) |>
filter(opp_pct < 50)
games = nrow(data)
wins = data |> filter(win_team == team) |> nrow()
return(round(wins / games * 100, 1))
}
above_below_500 = data.frame(team = all_teams) |>
mutate(above_500_pct = sapply(team, get_win_pct_above_500),
below_500_pct = sapply(team, get_win_pct_below_500))
above_below_500 |>
inner_join(teams_info, by = "team") |>
ggplot(aes(below_500_pct, above_500_pct)) +
geom_point(aes(col = team), size = 4, shape = "square", show.legend = F) +
# geom_hline(yintercept = 50, alpha = 0.05) +
# geom_vline(xintercept = 50, alpha = 0.05) +
geom_hline(yintercept = mean(above_below_500$above_500_pct), linetype = "dashed", alpha = 0.5) +
geom_vline(xintercept = mean(above_below_500$below_500_pct), linetype = "dashed", alpha = 0.5) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3) +
labs(x = "Win Percentage vs. Below .500 Opponents",
y = "Win Percentage vs. Above .500 Opponents",
title = "Win Percentage vs. Above/Below .500 Opponents",
subtitle = "Dashed lines represent league averages") +
scale_x_continuous(breaks = seq(0, 100, by = 5)) +
scale_y_continuous(breaks = seq(0, 100, by = 5))
team_rpg |>
mutate(py = round((rspg ^ 2) / (rspg ^ 2 + rapg ^ 2) * 100, 1)) |>
inner_join(team_records, by = "team") |>
distinct(team, pct, py) |>
inner_join(teams_info, by = "team") |>
ggplot(aes(py, pct)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3) +
geom_abline(linetype = "dashed", alpha = 0.5) +
labs(x = "Pythagorean Wins", y = "True Win Percentage",
title = "Pythagorean Wins v. True Win Percentage",
subtitle = "Teams above dashed line are better than they 'should' be") +
scale_x_continuous(breaks = seq(0, 100, by = 5)) +
scale_y_continuous(breaks = seq(0, 100, by = 5))
get_npr_on = function(team, dt) {
return(end_npr |>
filter((home_team == team | away_team == team) & date <= dt) |>
mutate(team_npr = ifelse(home_team == team, home_off_npr + home_def_npr, away_off_npr + away_def_npr)) |>
summarise(npr = sum(team_npr)) |>
pull(npr))
}
all_szn_dates = seq.Date(from = min(end_games$date), to = Sys.Date(), by = 1)
npr_on_dates = crossing(team = all_teams, date = all_szn_dates) |>
rowwise() |>
mutate(npr_on_date = get_npr_on(team = team, dt = date)) |>
ungroup()
npr_on_dates = npr_on_dates |>
inner_join(teams_info, by = "team") |>
inner_join(team_divisons, by = "team")
last_dates = npr_on_dates |>
group_by(team) |>
filter(date == max(date)) |>
ungroup()
npr_on_dates |>
ggplot(aes(date, npr_on_date)) +
geom_line(aes(col = team), linewidth = 1.25, show.legend = F) +
scale_color_manual(values = team_hex) +
theme(axis.text = element_blank()) +
facet_wrap(vars(division)) +
labs(x = NULL, y = NULL, title = "Season-Long Team NPR Trends") +
ggrepel::geom_text_repel(aes(label = abb), data = last_dates, segment.alpha = 0, nudge_x = 10, direction = "y", hjust = 0, size = 3, show.legend = F)
get_py_on = function(team, dt) {
data = end_games |>
filter((home_team == team | away_team == team) & date <= dt) |>
mutate(team_score = ifelse(home_team == team, home_score, away_score),
opp_score = ifelse(home_team == team, away_score, home_score))
rs = sum(data$team_score)
ra = sum(data$opp_score)
py = round(rs ^ 2 / (rs ^ 2 + ra ^ 2) * 100, 1)
return(py)
}
py_dates = crossing(team = all_teams, date = all_szn_dates) |>
rowwise() |>
mutate(py_on_date = get_py_on(team = team, dt = date)) |>
ungroup() |>
na.omit()
py_on_dates = py_dates |>
inner_join(teams_info, by = "team") |>
inner_join(team_divisons, by = "team")
label_positions = py_on_dates |>
group_by(team) |>
filter(date == max(date)) |>
ungroup()
py_on_dates |>
ggplot(aes(date, py_on_date)) +
geom_line(aes(col = team), linewidth = 1.25, show.legend = F) +
ggrepel::geom_text_repel(data = label_positions, aes(label = abb), size = 3, hjust = 1, nudge_x = 10, show.legend = F) +
scale_color_manual(values = team_hex) +
theme(axis.text = element_blank()) +
facet_wrap(vars(division)) +
labs(x = NULL, y = NULL,
title = "Season-Long Pythagorean Winning Percentage",
caption = "Pythagorean Wins = (Runs Scored ^ 2) / (Runs Scored ^ 2 + Runs Allowed ^ 2)")
get_team_game_runs = function(team) {
data = end_games |>
filter(home_team == team | away_team == team) |>
mutate(my_score = ifelse(home_team == team, home_score, away_score),
other_score = ifelse(home_team == team, away_score, home_score)) |>
distinct(date, my_score, other_score) |>
arrange(desc(date)) |>
pull(my_score)
count = 0
if (data[1] < 3) {
return(0)
} else {
i = 1
while (data[i] >= 3) {
count = count + 1
i = i + 1
}
}
return(count)
}
x = data.frame(team = all_teams) |>
mutate(run_streak = sapply(team, get_team_game_runs)) |>
slice_max(run_streak, n = 5, with_ties = F) |>
mutate(x = as.character(glue("{team} ({run_streak})"))) |>
pull(x)
get_team_game_runs_allowed = function(team) {
data = end_games |>
filter(home_team == team | away_team == team) |>
mutate(my_score = ifelse(home_team == team, home_score, away_score),
other_score = ifelse(home_team == team, away_score, home_score)) |>
distinct(date, my_score, other_score) |>
arrange(desc(date)) |>
pull(other_score)
count = 0
if (data[1] >= 5) {
return(0)
} else {
i = 1
while (data[i] < 5) {
count = count + 1
i = i + 1
}
}
return(count)
}
y = data.frame(team = all_teams) |>
mutate(all = sapply(team, get_team_game_runs_allowed)) |>
slice_max(all, n = 5, with_ties = F) |>
mutate(y = as.character(glue("{team} ({all})"))) |>
pull(y)
get_date_tenth_last_game = function(team) {
date = end_games |>
filter(home_team == team | away_team == team) |>
slice_max(date, n = 10, with_ties = F) |>
slice_min(date, n = 1, with_ties = F) |>
pull(date)
return(as.character(date))
}
teams_tenth_last = data.frame(team = all_teams) |>
mutate(tenth_date = as_date(sapply(team, get_date_tenth_last_game)))
last_ten_npr_diff = teams_tenth_last |>
rowwise() |>
mutate(npr_past = get_npr_on(team = team, dt = tenth_date)) |>
ungroup() |>
inner_join(team_npr |>
distinct(team, total_npr), by = "team") |>
inner_join(team_records |>
transmute(team, gp = wins + losses), by = "team") |>
mutate(npr_past = round(npr_past / gp, 2),
diff = total_npr - npr_past) |>
distinct(team, npr_past, total_npr, diff)
last_ten_diffs = last_ten_npr_diff |> distinct(team, diff)
segment_data = last_ten_npr_diff |>
distinct(team, npr_past, total_npr) |>
inner_join(last_ten_diffs, by = "team") |>
mutate(diff = round(diff, 2),
team = as.character(glue("{team} ({diff})")))
segment_data |>
ggplot(aes(x = reorder(team, diff), xend = reorder(team, diff), y = npr_past, yend = total_npr, col = diff)) +
geom_segment(linewidth = 3, show.legend = F) +
coord_flip() +
labs(x = NULL, y = "Change in NPR",
title = "Team NPR Trends in Past Ten Games") +
scale_y_continuous(breaks = seq(-5, 5, by = 0.1)) +
scale_color_gradient(low = "indianred3", high = "springgreen4")
get_pk_first_inning_scores = function(pk) {
return(mlb_pbp(game_pk = pk) |>
filter(about.inning == 1) |>
group_by(game_pk, home_team, away_team) |>
summarise(home_flg = ifelse(max(result.homeScore) > 0, 1, 0),
away_flg = ifelse(max(result.awayScore) > 0, 1, 0),
.groups = "drop"))
}
first_inning_scores = read_csv("data/first_inning_scores.csv", show_col_types = F)
already_done_pks = first_inning_scores$game_pk
to_do_pks = end_games |> filter(!game_pk %in% already_done_pks) |> pull(game_pk)
new_pks = data.frame()
for (pk in to_do_pks) {
new_pks = bind_rows(new_pks, get_pk_first_inning_scores(pk))
}
first_inning_scores = bind_rows(first_inning_scores, new_pks)
write_csv(first_inning_scores, "data/first_inning_scores.csv")
get_team_fi_score_rate = function(team) {
home = first_inning_scores |> filter(home_team == team) |> pull(home_flg)
away = first_inning_scores |> filter(away_team == team) |> pull(away_flg)
return(round(mean(c(home, away)) * 100, 1))
}
get_team_fi_allow_rate = function(team) {
home = first_inning_scores |> filter(home_team == team) |> pull(away_flg)
away = first_inning_scores |> filter(away_team == team) |> pull(home_flg)
return(round(mean(c(home, away)) * 100, 1))
}
fi_rates = data.frame(team = all_teams) |>
mutate(fi_score_rate = sapply(team, get_team_fi_score_rate),
fi_allow_rate = sapply(team, get_team_fi_allow_rate))
fi_rates |>
inner_join(teams_info, by = "team") |>
ggplot(aes(fi_score_rate, fi_allow_rate)) +
geom_point(aes(col = team), shape = "square", size = 4, show.legend = F) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3) +
geom_vline(xintercept = mean(fi_rates$fi_score_rate), linetype = "dashed", alpha = 0.25) +
geom_hline(yintercept = mean(fi_rates$fi_allow_rate), linetype = "dashed", alpha = 0.25) +
labs(x = "First Inning Score Rate", y = "First Inning Run Allowance Rate",
title = "First Inning Run Score/Allowance Rates")
get_team_one_run_win_pct = function(team) {
games = end_margins |> filter(margin == 1 & (home_team == team | away_team == team))
total = nrow(games)
wins = games |> filter(win_team == team) |> nrow()
return(round(wins / total * 100, 2))
}
get_team_multi_run_win_pct = function(team) {
games = end_margins |> filter(margin > 1 & (home_team == team | away_team == team))
total = nrow(games)
wins = games |> filter(win_team == team) |> nrow()
return(round(wins / total * 100, 2))
}
data.frame(team = all_teams) |>
mutate(or_pct = sapply(team, get_team_one_run_win_pct),
mr_pct = sapply(team, get_team_multi_run_win_pct)) |>
inner_join(teams_info, by = "team") |>
ggplot(aes(or_pct, mr_pct)) +
geom_point(aes(col = team), size = 4, shape = "square", show.legend = F) +
scale_color_manual(values = team_hex) +
ggrepel::geom_text_repel(aes(label = abb), size = 3) +
geom_vline(xintercept = 50, linetype = "dashed", alpha = 0.5) +
geom_hline(yintercept = 50, linetype = "dashed", alpha = 0.5) +
labs(x = "Win Percentage in One-Run Games",
y = "Win Percentage in Multi-Run Games",
title = "One-Run vs. Multi-Run Games") +
scale_x_continuous(breaks = seq(0, 100, by = 5)) +
scale_y_continuous(breaks = seq(0, 100, by = 5))
get_npr_last_25 = function(team) {
return(end_npr |>
filter(home_team == team | away_team == team) |>
slice_max(date, n = 25, with_ties = F) |>
mutate(my_off_npr = ifelse(home_team == team, home_off_npr, away_off_npr),
my_def_npr = ifelse(home_team == team, home_def_npr, away_def_npr)) |>
summarise(total_npr = round(sum(my_off_npr + my_def_npr) / 25, 3)) |>
pull(total_npr))
}
data.frame(team = all_teams) |>
mutate(last25 = sapply(team, get_npr_last_25)) |>
arrange(desc(last25))
get_team_result_on_date = function(tm, dt) {
data = end_games |> filter(date == dt & (home_team == tm | away_team == tm))
if (nrow(data) == 0) return("DNP")
if (data$win_team[1] == tm) return("Win")
if (data$lose_team[1] == tm) return("Loss")
}
team_results_dates_raw = crossing(team = all_teams, date = unique(end_games$date)) |>
arrange(team, date) |>
rowwise() |>
mutate(result = get_team_result_on_date(tm = team, dt = date)) |>
ungroup()
team_results_dates = team_results_dates_raw |>
filter(result != "DNP") |>
group_by(team) |>
mutate(game_num = row_number()) |>
ungroup()
min_date = team_results_dates |>
filter(game_num == 10) |>
slice_max(date, n = 1, with_ties = F) |>
pull(date)
window_dates = seq.Date(from = min_date, max(end_games$date), by = 1)
get_team_ten_on_date = function(tm, dt) {
data = team_results_dates |>
filter(team == tm & date <= dt) |>
slice_max(date, n = 10, with_ties = F) |>
mutate(win_flg = ifelse(result == "Win", 1, 0)) |>
summarise(pct = mean(win_flg) * 100) |>
pull(pct)
return(data)
}
ten_game_window_pcts = crossing(team = all_teams, date = window_dates) |>
rowwise() |>
mutate(pct = get_team_ten_on_date(tm = team, dt = date)) |>
ungroup()
team_window_sds = ten_game_window_pcts |>
group_by(team) |>
summarise(sd = round(sd(pct), 1)) |>
arrange(sd)
base_data = ten_game_window_pcts |>
inner_join(teams_info, by = "team") |>
inner_join(team_window_sds, by = "team") |>
inner_join(select(team_records, team, win_pct = pct), by = "team") |>
mutate(abb = paste0(abb, " (", sd, ")"))
ordered_abbs = base_data |>
distinct(abb, win_pct) |>
arrange(desc(win_pct))
base_data |>
mutate(abb = factor(abb, levels = ordered_abbs$abb)) |>
ggplot(aes(date, pct)) +
geom_line(aes(col = team), linewidth = 1, show.legend = F) +
# geom_line(stat = "smooth", method = "loess", formula = y ~ x, se = F, alpha = 1) +
geom_hline(yintercept = 50, linetype = "dotted", alpha = 0.25) +
facet_wrap(vars(abb)) +
scale_color_manual(values = team_hex) +
labs(x = NULL, y = "Win Percentage in Ten-Game Window",
title = "Season-long win percentages in rolling ten-game windows",
subtitle = "Number in parentheses represents standard deviation as a pseudo-measure of streakiness") +
theme(axis.text = element_blank())
# suppressMessages(library(zoo))
# suppressMessages(library(patchwork))
#
# resp = read_csv("C:/Users/chadr/Downloads/resp_by_date.csv", show_col_types = F) |>
#   clean_names() |>
#   filter(year(resp_dt) == 2024)
#
# resp |>
#   mutate(roll = rollapply(resp_cnt, width = 10, FUN = "mean", align = "right", fill = NA)) |>
#   na.omit() |>
#   ggplot(aes(resp_dt, roll)) +
#   geom_line(linewidth = 1.5, col = "#5b7c9f") +
#   geom_line(stat = "smooth", formula = y ~ x, method = "loess", col = "black", linetype = "dashed") +
#   labs(x = "Response Date", y = "Ten-day rolling average",
#        title = "2024 YTD responses, ten-day rolling average")
get_team_all_pythag = function(tm) {
data = end_games |>
filter(home_team == tm | away_team == tm) |>
mutate(my_score = ifelse(home_team == tm, home_score, away_score),
other_score = ifelse(home_team == tm, away_score, home_score),
pythag = (my_score ^ 2) / (my_score ^ 2 + other_score ^ 2)) |>
transmute(team = tm, date, pythag)
return(data)
}
pythag = data.frame()
for (team in all_teams) {
new = get_team_all_pythag(tm = team)
pythag = rbind(pythag, new)
}
hex_pct_ordered = team_records |>
inner_join(teams_info, by = "team") |>
arrange(desc(pct)) |>
pull(hex)
pythag |>
group_by(team) |>
mutate(roll = rollapply(pythag, width = 10, FUN = "mean", align = "right", fill = NA)) |>
ungroup() |>
na.omit() |>
inner_join(teams_info, by = "team") |>
inner_join(team_records, by = "team") |>
mutate(abb = fct_reorder(abb, -pct)) |>
ggplot(aes(date, roll)) +
geom_line(aes(col = abb), linewidth = 1.25, show.legend = F) +
# geom_line(stat = "smooth", formula = y ~ x, method = "loess", se = F) +
geom_hline(yintercept = 0.5, linetype = "dashed", alpha = 0.5) +
scale_color_manual(values = hex_pct_ordered) +
facet_wrap(vars(abb)) +
theme(axis.text = element_blank()) +
labs(x = NULL, y = "Pythagorean Win Percentage",
title = "Season-long pythagorean win percentage in ten-game rolling windows",
subtitle = "Average of individual games method")
get_team_runs_scored_on = function(tm, dt) {
data = end_games |> filter((home_team == tm | away_team == tm) & date == dt)
if (nrow(data) == 0) return(NA)
runs = data |> mutate(runs = ifelse(home_team == tm, home_score, away_score)) |> pull(runs)
return(sum(runs))
}
get_team_runs_allowed_on = function(tm, dt) {
data = end_games |> filter((home_team == tm | away_team == tm) & date == dt)
if (nrow(data) == 0) return(NA)
runs = data |> mutate(runs = ifelse(home_team == tm, away_score, home_score)) |> pull(runs)
return(sum(runs))
}
# this took 17s to run on 2024/08/24
scored_allowed_on_dates = crossing(team = all_teams, date = all_szn_dates) |>
rowwise() |>
mutate(scored = get_team_runs_scored_on(tm = team, dt = date),
allowed = get_team_runs_allowed_on(tm = team, dt = date)) |>
ungroup() |>
na.omit()
scored_allowed_on_dates |>
mutate(roll_score = rollapply(scored, width = 10, FUN = "sum", align = "right", fill = NA),
roll_allow = rollapply(allowed, width = 10, FUN = "sum", align = "right", fill = NA),
pythag = (roll_score ^ 2) / (roll_score ^ 2 + roll_allow ^ 2)) |>
na.omit() |>
inner_join(teams_info, by = "team") |>
inner_join(team_records, by = "team") |>
mutate(abb = fct_reorder(abb, -pct)) |>
ggplot(aes(date, pythag)) +
geom_line(aes(col = abb), linewidth = 1.25, show.legend = F) +
# geom_line(stat = "smooth", formula = y ~ x, method = "loess", se = F) +
geom_hline(yintercept = 0.5, linetype = "dashed", alpha = 0.5) +
scale_color_manual(values = hex_pct_ordered) +
facet_wrap(vars(abb)) +
theme(axis.text = element_blank()) +
labs(x = NULL, y = "Pythagorean Win Percentage in Ten-Game Window",
title = "Season-long pythagorean win percentages in rolling ten-game windows")
data.frame(team = all_teams) |>
mutate(rs = sapply(team, get_team_runs_scored),
ra = sapply(team, get_team_runs_allowed),
py = round((rs ^ 2) / (rs ^ 2 + ra ^ 2) * 100, 2),
rank = as.integer(rank(-py))) |>
arrange(rank)
py_ranks = data.frame(team = all_teams) |>
mutate(rs = sapply(team, get_team_runs_scored),
ra = sapply(team, get_team_runs_allowed),
py = round((rs ^ 2) / (rs ^ 2 + ra ^ 2) * 100, 2),
rank = as.integer(rank(-py))) |>
arrange(rank)
library(cfbfastR)
cfbfastR::load_cfb_schedules(seasons = most_recent_cfb_season())
cfbfastR::load_cfb_schedules(seasons = 2023)
cfbfastR::load_cfb_schedules(seasons = 2024)
cfbfastR::load_cfb_schedules(seasons = 2024)
setwd("~/r_projects/tsbfl25")
